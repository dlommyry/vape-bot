import asyncio
import logging
import os
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           ReplyKeyboardMarkup, KeyboardButton)
from aiogram.utils import executor
from aiogram.dispatcher import filters

# ---------------------------------------------------------
# 1.  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ---------------------------------------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMINS = {int(x) for x in os.getenv("ADMINS", "").replace(" ", "").split(",") if x}

logging.basicConfig(
    level=logging.INFO,                      # INFO ‚Üí –≤—ã–≤–æ–¥–∏–º –≤—Å—ë –ø–æ–ª–µ–∑–Ω–æ–µ
    format="%(asctime)s | %(levelname)-8s | %(message)s",
)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ---------------------------------------------------------
# 2.  –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π (SQLite)
# ---------------------------------------------------------
DB_FILE = "vape_shop.db"
conn = sqlite3.connect(DB_FILE)
cursor = conn.cursor()

def _create_base_schema(cur):
    cur.executescript(
        """
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name      TEXT,
            description TEXT,
            category  TEXT,
            created_at TEXT DEFAULT (datetime('now'))
        );
        CREATE TABLE IF NOT EXISTS flavours (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER,
            name   TEXT,
            qty    INTEGER DEFAULT 0,
            FOREIGN KEY(product_id) REFERENCES products(id) ON DELETE CASCADE
        );
        CREATE TABLE IF NOT EXISTS carts (
            user_id INTEGER,
            flavour_id INTEGER,
            qty INTEGER,
            PRIMARY KEY(user_id, flavour_id)
        );
        """
    )

def _ensure_schema(cur):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏/—Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    _create_base_schema(cur)                              # –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ –±—ã–ª–æ –≤–æ–≤—Å–µ

    cur.execute("PRAGMA table_info(products)")
    cols = {row[1] for row in cur.fetchall()}
    if "category" not in cols:
        logging.warning("DB-migrate: –¥–æ–±–∞–≤–ª—è–µ–º products.category")
        cur.execute("ALTER TABLE products ADD COLUMN category TEXT DEFAULT '–†–∞–∑–Ω–æ–µ'")
        conn.commit()

_ensure_schema(cursor)

# ---------------------------------------------------------
# 3.  –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ---------------------------------------------------------
CATS = ["–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã", "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã", "–ñ–∏–¥–∫–æ—Å—Ç–∏", "–†–∞–∑–Ω–æ–µ"]

def main_kb(user_id: int):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞"))
    kb.add(KeyboardButton("üìÑ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton("‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    if user_id in ADMINS:
        kb.add(KeyboardButton("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    return kb

def admin_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"), KeyboardButton("‚úèÔ∏è –û—Å—Ç–∞—Ç–æ–∫"))
    kb.add(KeyboardButton("üì¶ –°–∫–ª–∞–¥"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å"))
    kb.add(KeyboardButton("üìÉ –ó–∞–∫–∞–∑—ã"), KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    return kb

def cat_kb():
    m = InlineKeyboardMarkup()
    for c in CATS:
        m.add(InlineKeyboardButton(c, callback_data=f"CAT_{c}"))
    return m

# ---------------------------------------------------------
# 4.  –°–æ—Å—Ç–æ—è–Ω–∏—è ¬´–ø–æ—à–∞–≥–æ–≤–æ–≥–æ¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
# ---------------------------------------------------------
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

dp.storage = MemoryStorage()

class Add(StatesGroup):
    category  = State()
    name      = State()
    descr     = State()
    flavours  = State()
    qty       = State()

# ---------------------------------------------------------
# 5.  –•—ç–Ω–¥–ª–µ—Ä—ã
# ---------------------------------------------------------
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_kb(m.from_user.id))

# ---------- –∫–ª–∏–µ–Ω—Ç ----------
@dp.message_handler(text="üõç –ö–∞—Ç–∞–ª–æ–≥")
async def open_catalog(m: types.Message):
    await m.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=cat_kb())

@dp.callback_query_handler(filters.Text(startswith="CAT_"))
async def open_cat(cb: types.CallbackQuery):
    cat = cb.data[4:]
    cur = conn.cursor()
    cur.execute(
        """SELECT p.id,p.name,COALESCE(SUM(f.qty),0)
           FROM products p LEFT JOIN flavours f ON p.id=f.product_id
           WHERE p.category=? GROUP BY p.id""",
        (cat,),
    )
    rows = cur.fetchall()
    if not rows:
        await cb.answer("–ü—É—Å—Ç–æ")
        return
    txt = "\n".join(f"{r[1]} ({r[2]})" for r in rows)
    await cb.message.answer(txt)
    await cb.answer()

@dp.message_handler(text="üß∫ –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(m: types.Message):
    cur.execute("""SELECT SUM(qty) FROM carts WHERE user_id=?""", (m.from_user.id,))
    total = cur.fetchone()[0]
    if not total:
        await m.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        await m.answer(f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {total}")

@dp.message_handler(text="üìÑ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders(m: types.Message):
    await m.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")  # —É–ø—Ä–æ—â—ë–Ω–Ω–æ

@dp.message_handler(text="‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(m: types.Message):
    await m.answer("–ö–æ–Ω—Ç–∞–∫—Ç: @PlumbusSupport")

# ---------- –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–∞–Ω–µ–ª–µ–π ----------
@dp.message_handler(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(m: types.Message):
    if m.from_user.id not in ADMINS:
        return
    await m.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_kb())

@dp.message_handler(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_to_user(m: types.Message):
    await m.answer("–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º.", reply_markup=main_kb(m.from_user.id))

# ---------- –∞–¥–º–∏–Ω - —Å–∫–ª–∞–¥/–æ—Å—Ç–∞—Ç–æ–∫ ----------
@dp.message_handler(lambda m: m.text in {"üì¶ –°–∫–ª–∞–¥", "‚úèÔ∏è –û—Å—Ç–∞—Ç–æ–∫"} and m.from_user.id in ADMINS)
async def warehouse(m: types.Message):
    cur.execute("""SELECT p.name,f.name,f.qty
                   FROM flavours f JOIN products p ON p.id=f.product_id
                   ORDER BY p.name""")
    lines = [f"{p} ‚Äì {fl}: {q}" for p,fl,q in cur.fetchall()]
    await m.answer("\n".join(lines) or "–°–∫–ª–∞–¥ –ø—É—Å—Ç.")

# ---------- –∞–¥–º–∏–Ω - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ----------
@dp.message_handler(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", user_id=ADMINS)
async def add_start(m: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*CATS)
    await m.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await state.set_state(Add.category)

@dp.message_handler(state=Add.category)
async def add_name(m: types.Message, state: FSMContext):
    if m.text not in CATS:
        return await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!")
    await state.update_data(cat=m.text)
    await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Add.name)

@dp.message_handler(state=Add.name)
async def add_descr(m: types.Message, state: FSMContext):
    await state.update_data(name=m.text)
    await m.answer("–û–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(Add.descr)

@dp.message_handler(state=Add.descr)
async def add_flavour_cnt(m: types.Message, state: FSMContext):
    await state.update_data(descr=m.text)
    await m.answer("–°–∫–æ–ª—å–∫–æ –≤–∫—É—Å–æ–≤? (0 ‚Äî –±–µ–∑ –≤–∫—É—Å–∞)")
    await state.set_state(Add.flavours)

@dp.message_handler(state=Add.flavours)
async def add_flavour_loop(m: types.Message, state: FSMContext):
    if not m.text.isdigit():
        return await m.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    cnt = int(m.text)
    await state.update_data(cnt=cnt, flavours=[], step=0)
    if cnt == 0:
        await _save_product(state, m)
        return
    await m.answer("–í–∫—É—Å ‚Ññ1:")
    await state.set_state(Add.qty)

@dp.message_handler(state=Add.qty)
async def add_qty(m: types.Message, state: FSMContext):
    data = await state.get_data()
    step = data["step"]
    flavours = data["flavours"]
    if step % 2 == 0:      # –∂–¥—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞
        flavours.append({"name": m.text})
        await state.update_data(flavours=flavours, step=step+1)
        await m.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    else:                  # –∂–¥—ë–º qty
        if not m.text.isdigit():
            return await m.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        flavours[-1]["qty"] = int(m.text)
        await state.update_data(flavours=flavours, step=step+1)
        if len(flavours) == data["cnt"]:
            await _save_product(state, m)
        else:
            await m.answer(f"–í–∫—É—Å ‚Ññ{len(flavours)+1}:")
    # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

async def _save_product(state: FSMContext, m: types.Message):
    d = await state.get_data()
    cur.execute(
        "INSERT INTO products(name,description,category) VALUES(?,?,?)",
        (d["name"], d["descr"], d["cat"]),
    )
    pid = cur.lastrowid
    cur.executemany(
        "INSERT INTO flavours(product_id,name,qty) VALUES(?,?,?)",
        [(pid, f["name"], f["qty"]) for f in d["flavours"]],
    )
    conn.commit()
    logging.info("product added id=%s cat=%s", pid, d["cat"])
    await m.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=admin_kb())
    await state.finish()

# ---------- DEBUG (–≤–∏–¥–Ω–æ –≤ Deploy Logs) ----------
if os.getenv("DEBUG"):
    @dp.callback_query_handler(lambda c: True)
    async def _debug_any_cb(c: types.CallbackQuery):
        logging.warning("CALLBACK %s –æ—Ç %s", c.data, c.from_user.id)
        await c.answer()

# ---------------------------------------------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
