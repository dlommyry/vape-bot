import logging
import os
import sqlite3

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardMarkup)
from aiogram.utils import executor
from config import BOT_TOKEN, ADMINS            # ‚Üê –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Railway

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN)
dp  = Dispatcher(bot, storage=MemoryStorage())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ë–î SQLite ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
db  = sqlite3.connect("vape_shop.db")
cur = db.cursor()
cur.executescript("""
CREATE TABLE IF NOT EXISTS products(id INTEGER PRIMARY KEY,name TEXT,description TEXT,quantity INTEGER);
CREATE TABLE IF NOT EXISTS cart(user_id INTEGER, product_id INTEGER, qty INTEGER);
CREATE TABLE IF NOT EXISTS orders(id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER, items TEXT, ts DATETIME DEFAULT CURRENT_TIMESTAMP);
""")
db.commit()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
main_kb  = ReplyKeyboardMarkup(resize_keyboard=True).row("üõç –ö–∞—Ç–∞–ª–æ–≥","üß∫ –ö–æ—Ä–∑–∏–Ω–∞").add("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
admin_kb = ReplyKeyboardMarkup(resize_keyboard=True).row("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä","‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")\
                                                   .row("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫","üì¶ –û—Å—Ç–∞—Ç–∫–∏").add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
switch_kb = ReplyKeyboardMarkup(resize_keyboard=True)\
            .add("üõí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º","üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class AdminMode(StatesGroup):
    user  = State()   # —Ä–µ–∂–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    admin = State()   # —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

class AddProduct(StatesGroup):
    name = State(); desc = State(); qty  = State()

class EditStock(StatesGroup):
    choose = State(); qty = State()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start + –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(commands="start", state="*")
async def cmd_start(m: types.Message, state: FSMContext):
    if str(m.from_user.id) in ADMINS:
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=switch_kb)
        await state.finish()
    else:
        await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_kb)
        await AdminMode.user.set()

@dp.message_handler(lambda m: m.text == "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", state="*")
async def to_admin(m: types.Message, state: FSMContext):
    if str(m.from_user.id) not in ADMINS:
        await m.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return
    await m.answer("üîß –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=admin_kb)
    await AdminMode.admin.set()

@dp.message_handler(lambda m: m.text == "üõí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º", state="*")
async def to_user(m: types.Message, state: FSMContext):
    await m.answer("üõí –†–µ–∂–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.", reply_markup=main_kb)
    await AdminMode.user.set()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda m: m.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", state=AdminMode.user)
async def support(m: types.Message):
    await m.answer("–î–ª—è —Å–≤—è–∑–∏: @PlumbusSupport")

@dp.message_handler(lambda m: m.text == "üõç –ö–∞—Ç–∞–ª–æ–≥", state=AdminMode.user)
async def catalog(m: types.Message):
    kb = InlineKeyboardMarkup()
    cur.execute("SELECT id,name,quantity FROM products")
    for pid,name,qty in cur.fetchall():
        kb.add(InlineKeyboardButton(f"{name} ({qty})", callback_data=f"view:{pid}"))
    await m.answer("–ö–∞—Ç–∞–ª–æ–≥:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("view:"), state=AdminMode.user)
async def view(cb: types.CallbackQuery):
    pid = int(cb.data.split(":",1)[1])
    cur.execute("SELECT name,description,quantity FROM products WHERE id=?", (pid,))
    name,desc,qty = cur.fetchone()
    kb = InlineKeyboardMarkup()
    if qty>0:
        kb.add(InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add:{pid}"))
    await cb.message.answer(f"*{name}*\n{desc}\n–û—Å—Ç–∞—Ç–æ–∫: {qty}", parse_mode="Markdown", reply_markup=kb)
    await cb.answer()

# -------- –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
class Qty(StatesGroup): waiting = State()

@dp.callback_query_handler(lambda c: c.data.startswith("add:"), state=AdminMode.user)
async def ask_qty(cb: types.CallbackQuery, state:FSMContext):
    pid = int(cb.data.split(":",1)[1])
    await state.update_data(pid=pid)
    kb = InlineKeyboardMarkup()
    for i in range(1,11):
        kb.add(InlineKeyboardButton(str(i), callback_data=f"q:{i}"))
    await cb.message.answer("–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫?", reply_markup=kb)
    await Qty.waiting.set(); await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q:"), state=Qty.waiting)
async def save_qty(cb: types.CallbackQuery, state:FSMContext):
    qty = int(cb.data.split(":",1)[1])
    data = await state.get_data(); pid=data['pid']
    cur.execute("INSERT INTO cart VALUES (?,?,?)",(cb.from_user.id,pid,qty)); db.commit()
    await cb.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")
    await state.finish(); await cb.answer()

# -------- –∫–æ—Ä–∑–∏–Ω–∞
@dp.message_handler(lambda m: m.text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞", state=AdminMode.user)
async def show_cart(m: types.Message):
    cur.execute("""SELECT cart.rowid,products.name,cart.qty
                   FROM cart JOIN products ON products.id=cart.product_id
                   WHERE cart.user_id=?""",(m.from_user.id,))
    rows=cur.fetchall()
    if not rows:
        await m.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."); return
    text="\n".join(f"{rid}. {n} √ó{q}" for rid,n,q in rows)
    kb = InlineKeyboardMarkup()
    for rid,_,_ in rows:
        kb.add(InlineKeyboardButton(f"üóë {rid}", callback_data=f"del:{rid}"))
    kb.add(InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clr"),
           InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="ok"))
    await m.answer("–ö–æ—Ä–∑–∏–Ω–∞:\n"+text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data=="clr", state=AdminMode.user)
async def cart_clear(cb: types.CallbackQuery):
    cur.execute("DELETE FROM cart WHERE user_id=?", (cb.from_user.id,)); db.commit()
    await cb.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞."); await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("del:"), state=AdminMode.user)
async def cart_del(cb: types.CallbackQuery):
    cur.execute("DELETE FROM cart WHERE rowid=?", (int(cb.data.split(':',1)[1]),)); db.commit()
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ"); await show_cart(cb.message)

@dp.callback_query_handler(lambda c: c.data=="ok", state=AdminMode.user)
async def checkout(cb: types.CallbackQuery):
    cur.execute("""SELECT products.name,cart.qty FROM cart
                   JOIN products ON products.id=cart.product_id
                   WHERE cart.user_id=?""",(cb.from_user.id,))
    items = cur.fetchall()
    if not items:
        await cb.answer("–ü—É—Å—Ç–æ"); return
    line = ", ".join(f"{n}√ó{q}" for n,q in items)
    cur.execute("INSERT INTO orders(user_id,items) VALUES(?,?)",(cb.from_user.id,line))
    oid = cur.lastrowid; db.commit()
    cur.execute("DELETE FROM cart WHERE user_id=?", (cb.from_user.id,)); db.commit()
    for adm in ADMINS:
        await bot.send_message(adm, f"üÜï –ó–∞–∫–∞–∑ #{oid}\n{line}\n–û—Ç: {cb.from_user.get_mention()}")
    await cb.message.edit_text(f"–ó–∞–∫–∞–∑ #{oid} –ø—Ä–∏–Ω—è—Ç!"); await cb.answer()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–î–ú–ò–ù-—Ñ—É–Ω–∫—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
@dp.message_handler(lambda m: m.text=="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" and str(m.from_user.id) in ADMINS, state=AdminMode.admin)
async def add_1(m: types.Message): await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ?"); await AddProduct.name.set()
@dp.message_handler(state=AddProduct.name)
async def add_2(m: types.Message, state:FSMContext):
    await state.update_data(name=m.text); await m.answer("–û–ø–∏—Å–∞–Ω–∏–µ:"); await AddProduct.desc.set()
@dp.message_handler(state=AddProduct.desc)
async def add_3(m: types.Message, state:FSMContext):
    await state.update_data(desc=m.text); await m.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"); await AddProduct.qty.set()
@dp.message_handler(state=AddProduct.qty)
async def add_save(m: types.Message, state:FSMContext):
    try: qty=int(m.text)
    except: await m.answer("–ß–∏—Å–ª–æ!"); return
    d=await state.get_data()
    cur.execute("INSERT INTO products(name,description,quantity) VALUES(?,?,?)",(d['name'],d['desc'],qty)); db.commit()
    await m.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ.",reply_markup=admin_kb); await state.finish()

# ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
@dp.message_handler(lambda m: m.text=="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫" and str(m.from_user.id) in ADMINS, state=AdminMode.admin)
async def edit_choose(m: types.Message):
    kb=InlineKeyboardMarkup(); cur.execute("SELECT id,name FROM products")
    for pid,name in cur.fetchall(): kb.add(InlineKeyboardButton(name,callback_data=f"edit:{pid}"))
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:",reply_markup=kb)
@dp.callback_query_handler(lambda c:c.data.startswith("edit:"), state=AdminMode.admin)
async def edit_qty(cb: types.CallbackQuery, state:FSMContext):
    pid=int(cb.data.split(":",1)[1]); await state.update_data(pid=pid)
    await cb.message.answer("–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"); await EditStock.qty.set(); await cb.answer()
@dp.message_handler(state=EditStock.qty)
async def edit_save(m: types.Message, state:FSMContext):
    try: q=int(m.text)
    except: await m.answer("–ß–∏—Å–ª–æ!"); return
    pid=(await state.get_data())['pid']
    cur.execute("UPDATE products SET quantity=? WHERE id=?", (q,pid)); db.commit()
    await m.answer("–ì–æ—Ç–æ–≤–æ.",reply_markup=admin_kb); await state.finish()

# ‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
@dp.message_handler(lambda m:m.text=="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä" and str(m.from_user.id) in ADMINS, state=AdminMode.admin)
async def del_choose(m: types.Message):
    kb=InlineKeyboardMarkup(); cur.execute("SELECT id,name FROM products")
    for pid,name in cur.fetchall(): kb.add(InlineKeyboardButton(name,callback_data=f"del:{pid}"))
    await m.answer("–£–¥–∞–ª–∏—Ç—å:",reply_markup=kb)
@dp.callback_query_handler(lambda c:c.data.startswith("del:") and str(c.from_user.id) in ADMINS, state=AdminMode.admin)
async def del_exec(cb: types.CallbackQuery):
    pid=int(cb.data.split(":",1)[1])
    cur.execute("DELETE FROM products WHERE id=?", (pid,)); db.commit()
    await cb.message.answer("–£–¥–∞–ª—ë–Ω."); await cb.answer()

# üì¶ –û—Å—Ç–∞—Ç–∫–∏
@dp.message_handler(lambda m:m.text=="üì¶ –û—Å—Ç–∞—Ç–∫–∏" and str(m.from_user.id) in ADMINS, state=AdminMode.admin)
async def stock(m: types.Message):
    cur.execute("SELECT name,quantity FROM products")
    txt="\n".join(f"{n}: {q}" for n,q in cur.fetchall()) or "–°–∫–ª–∞–¥ –ø—É—Å—Ç."
    await m.answer(txt)

# ‚¨ÖÔ∏è –ù–∞–∑–∞–¥
@dp.message_handler(lambda m:m.text=="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and str(m.from_user.id) in ADMINS, state=AdminMode.admin)
async def back_admin(m: types.Message):
    await m.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_kb)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
