import logging, sqlite3, datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from config import BOT_TOKEN, ADMINS      # ‚Üê –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–¥—É—Ç –∏–∑ Railway

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN)
dp  = Dispatcher(bot, storage=MemoryStorage())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑—ã
db  = sqlite3.connect('vape_shop.db')
cur = db.cursor()
cur.executescript("""
CREATE TABLE IF NOT EXISTS products  (id INTEGER PRIMARY KEY,name TEXT,description TEXT,quantity INTEGER);
CREATE TABLE IF NOT EXISTS cart      (user_id INTEGER, product_id INTEGER, qty INTEGER);
CREATE TABLE IF NOT EXISTS waitlist  (user_id INTEGER, product_id INTEGER);
CREATE TABLE IF NOT EXISTS orders    (id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER, items TEXT, ts TEXT, status TEXT);
""")
db.commit()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
user_kb = ReplyKeyboardMarkup(resize_keyboard=True)
user_kb.add("üõç –ö–∞—Ç–∞–ª–æ–≥","üß∫ –ö–æ—Ä–∑–∏–Ω–∞").add("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞").add("üìú –ú–æ–∏ –∑–∞–∫–∞–∑—ã").add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

admin_kb = ReplyKeyboardMarkup(resize_keyboard=True)
admin_kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å","‚ùå –£–¥–∞–ª–∏—Ç—å").add("‚úèÔ∏è –û—Å—Ç–∞—Ç–æ–∫","üì¶ –°–∫–ª–∞–¥") \
        .add("üìë –ó–∞–∫–∞–∑—ã").add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

switch_kb = ReplyKeyboardMarkup(resize_keyboard=True)
switch_kb.add("üõí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º","üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM
class Mode(StatesGroup):
    user=State(); admin=State()
class Add(StatesGroup):
    name=State(); desc=State(); qty=State()
class EditQty(StatesGroup):
    pid=State(); qty=State()
class QtySel(StatesGroup):
    waiting=State()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
@dp.message_handler(commands="start", state="*")
async def start(m: types.Message, state:FSMContext):
    if str(m.from_user.id) in ADMINS:
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",reply_markup=switch_kb); await state.finish()
    else:
        await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",reply_markup=user_kb); await Mode.user.set()

@dp.message_handler(lambda m:m.text=="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", state="*")
async def to_admin(m: types.Message): 
    if str(m.from_user.id) not in ADMINS: return
    await m.answer("üîß –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",reply_markup=admin_kb); await Mode.admin.set()

@dp.message_handler(lambda m:m.text=="üõí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º", state="*")
async def to_user(m: types.Message):
    await m.answer("üõí –†–µ–∂–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.",reply_markup=user_kb); await Mode.user.set()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.message_handler(lambda m:m.text=="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", state=Mode.user)
async def support(m: types.Message): await m.answer("–°–≤—è–∑—å: @PlumbusSupport")

@dp.message_handler(lambda m:m.text=="üõç –ö–∞—Ç–∞–ª–æ–≥", state=Mode.user)
async def catalog(m: types.Message):
    kb=InlineKeyboardMarkup(); cur.execute("SELECT id,name,quantity FROM products")
    for pid,name,qty in cur.fetchall():
        kb.add(InlineKeyboardButton(f"{name} ({qty})",callback_data=f"view:{pid}"))
    await m.answer("–ö–∞—Ç–∞–ª–æ–≥:",reply_markup=kb)

@dp.callback_query_handler(lambda c:c.data.startswith("view:"), state=Mode.user)
async def view(cb: types.CallbackQuery):
    pid=int(cb.data.split(":")[1])
    cur.execute("SELECT name,description,quantity FROM products WHERE id=?", (pid,))
    name,desc,qty=cur.fetchone()
    kb=InlineKeyboardMarkup(); 
    if qty>0: kb.add(InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É",callback_data=f"add:{pid}"))
    else:     kb.add(InlineKeyboardButton("üîî –ñ–¥–∞—Ç—å",callback_data=f"wait:{pid}"))
    await cb.message.answer(f"*{name}*\n{desc}\n–û—Å—Ç–∞—Ç–æ–∫: {qty}",parse_mode="Markdown",reply_markup=kb)
    await cb.answer()

# –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@dp.callback_query_handler(lambda c:c.data.startswith("add:"), state=Mode.user)
async def choose_qty(cb: types.CallbackQuery, state:FSMContext):
    pid=int(cb.data.split(":")[1]); await state.update_data(pid=pid)
    kb=InlineKeyboardMarkup(); [kb.add(InlineKeyboardButton(str(i),callback_data=f"q:{i}")) for i in range(1,11)]
    await cb.message.answer("–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫?",reply_markup=kb); await QtySel.waiting.set(); await cb.answer()

@dp.callback_query_handler(lambda c:c.data.startswith("q:"), state=QtySel.waiting)
async def save_qty(cb: types.CallbackQuery, state:FSMContext):
    qty=int(cb.data.split(":")[1]); pid=(await state.get_data())['pid']
    cur.execute("INSERT INTO cart VALUES(?,?,?)",(cb.from_user.id,pid,qty)); db.commit()
    await cb.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ"); await state.finish(); await cb.answer()

# wait-–ª–∏—Å—Ç
@dp.callback_query_handler(lambda c:c.data.startswith("wait:"), state=Mode.user)
async def add_wait(cb: types.CallbackQuery):
    pid=int(cb.data.split(":")[1])
    cur.execute("INSERT INTO waitlist VALUES (?,?)",(cb.from_user.id,pid)); db.commit()
    await cb.answer("–°–æ–æ–±—â—É, –∫–∞–∫ –ø–æ—è–≤–∏—Ç—Å—è!")

# –∫–æ—Ä–∑–∏–Ω–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
@dp.message_handler(lambda m:m.text=="üß∫ –ö–æ—Ä–∑–∏–Ω–∞", state=Mode.user)
async def cart(m: types.Message):
    cur.execute("""SELECT cart.rowid,products.name,cart.qty
                   FROM cart JOIN products ON products.id=cart.product_id
                   WHERE cart.user_id=?""",(m.from_user.id,))
    rows=cur.fetchall()
    if not rows: await m.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."); return
    kb=InlineKeyboardMarkup()
    txt="\n".join(f"{rid}. {n}√ó{q}" for rid,n,q in rows)
    for rid,_,_ in rows: kb.add(InlineKeyboardButton(f"üóë {rid}",callback_data=f"del:{rid}"))
    kb.add(InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å",callback_data="clr"),
           InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å",callback_data="checkout"))
    await m.answer("–ö–æ—Ä–∑–∏–Ω–∞:\n"+txt,reply_markup=kb)

@dp.callback_query_handler(lambda c:c.data=="clr", state=Mode.user)
async def clear_cart(cb: types.CallbackQuery):
    cur.execute("DELETE FROM cart WHERE user_id=?", (cb.from_user.id,)); db.commit()
    await cb.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞."); await cb.answer()

@dp.callback_query_handler(lambda c:c.data.startswith("del:"), state=Mode.user)
async def del_item(cb: types.CallbackQuery):
    cur.execute("DELETE FROM cart WHERE rowid=?", (int(cb.data.split(':')[1]),)); db.commit()
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ"); await cart(cb.message)

@dp.callback_query_handler(lambda c:c.data=="checkout", state=Mode.user)
async def checkout(cb: types.CallbackQuery):
    cur.execute("""SELECT products.name,cart.qty FROM cart
                   JOIN products ON products.id=cart.product_id
                   WHERE cart.user_id=?""",(cb.from_user.id,))
    items=cur.fetchall()
    if not items: await cb.answer("–ü—É—Å—Ç–æ"); return
    text=", ".join(f"{n}√ó{q}" for n,q in items)
    cur.execute("INSERT INTO orders(user_id,items,ts,status) VALUES(?,?,?,?)",
                (cb.from_user.id,text,datetime.datetime.now().isoformat(),"new"))
    oid=cur.lastrowid; db.commit()
    cur.execute("DELETE FROM cart WHERE user_id=?", (cb.from_user.id,)); db.commit()
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for adm in ADMINS:
        await bot.send_message(adm,f"üÜï –ó–∞–∫–∞–∑ #{oid}\n{text}\n–û—Ç: {cb.from_user.id}")
    await cb.message.edit_text(f"–ó–∞–∫–∞–∑ #{oid} –ø—Ä–∏–Ω—è—Ç! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è."); await cb.answer()

# –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
@dp.message_handler(lambda m:m.text=="üìú –ú–æ–∏ –∑–∞–∫–∞–∑—ã", state=Mode.user)
async def my_orders(m: types.Message):
    cur.execute("SELECT id,ts,items,status FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 10",
                (m.from_user.id,))
    rows=cur.fetchall()
    if not rows: await m.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."); return
    txt="\n\n".join(f"‚Ññ{i} ‚Ä¢ {ts[:16]}\n{it}\n–°—Ç–∞—Ç—É—Å: {st}" for i,ts,it,st in rows)
    await m.answer(txt)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ waitlist –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫–ª–∞–¥–∞
async def notify_waitlist(pid:int, new_qty:int):
    if new_qty<=0: return
    cur.execute("SELECT user_id FROM waitlist WHERE product_id=?", (pid,))
    users=[u for u,*_ in cur.fetchall()]
    if not users: return
    cur.execute("SELECT name FROM products WHERE id=?", (pid,)); name=cur.fetchone()[0]
    for uid in users:
        try: await bot.send_message(uid,f"üîî *{name}* —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏!",parse_mode="Markdown")
        except: pass
    cur.execute("DELETE FROM waitlist WHERE product_id=?", (pid,)); db.commit()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
@dp.message_handler(lambda m:m.text=="üì¶ –°–∫–ª–∞–¥" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def stock(m: types.Message):
    cur.execute("SELECT id,name,quantity FROM products")
    await m.answer("\n".join(f"{pid}. {n} ‚Äî {q}" for pid,n,q in cur.fetchall()) or "–ü—É—Å—Ç–æ.")

# ‚ûï –î–æ–±–∞–≤–∏—Ç—å
class AddFSM(StatesGroup): name=State(); desc=State(); qty=State()
@dp.message_handler(lambda m:m.text=="‚ûï –î–æ–±–∞–≤–∏—Ç—å" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def add_1(m: types.Message): await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ:"); await AddFSM.name.set()
@dp.message_handler(state=AddFSM.name)
async def add_2(m: types.Message, state:FSMContext):
    await state.update_data(name=m.text); await m.answer("–û–ø–∏—Å–∞–Ω–∏–µ:"); await AddFSM.desc.set()
@dp.message_handler(state=AddFSM.desc)
async def add_3(m: types.Message, state:FSMContext):
    await state.update_data(desc=m.text); await m.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"); await AddFSM.qty.set()
@dp.message_handler(state=AddFSM.qty)
async def add_save(m: types.Message, state:FSMContext):
    try:q=int(m.text)
    except: await m.answer("–ß–∏—Å–ª–æ!"); return
    d=await state.get_data()
    cur.execute("INSERT INTO products(name,description,quantity) VALUES(?,?,?)",(d['name'],d['desc'],q)); db.commit()
    await m.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ.",reply_markup=admin_kb); await state.finish()

# ‚úèÔ∏è –û—Å—Ç–∞—Ç–æ–∫
class EditFSM(StatesGroup): pid=State(); qty=State()
@dp.message_handler(lambda m:m.text=="‚úèÔ∏è –û—Å—Ç–∞—Ç–æ–∫" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def edit_1(m: types.Message):
    kb=InlineKeyboardMarkup(); cur.execute("SELECT id,name FROM products")
    for pid,name in cur.fetchall(): kb.add(InlineKeyboardButton(name,callback_data=f"chg:{pid}"))
    await m.answer("–í—ã–±–µ—Ä–∏:",reply_markup=kb)
@dp.callback_query_handler(lambda c:c.data.startswith("chg:"), state=Mode.admin)
async def edit_2(cb: types.CallbackQuery, state:FSMContext):
    pid=int(cb.data.split(":")[1]); await state.update_data(pid=pid)
    await cb.message.answer("–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:" ); await EditFSM.qty.set(); await cb.answer()
@dp.message_handler(state=EditFSM.qty)
async def edit_save(m: types.Message, state:FSMContext):
    try: q=int(m.text)
    except: await m.answer("–ß–∏—Å–ª–æ!"); return
    pid=(await state.get_data())['pid']
    cur.execute("UPDATE products SET quantity=? WHERE id=?", (q,pid)); db.commit()
    # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ waitlist
    await notify_waitlist(pid, q)
    await m.answer("–û—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.",reply_markup=admin_kb); await state.finish()

# ‚ùå –£–¥–∞–ª–∏—Ç—å
@dp.message_handler(lambda m:m.text=="‚ùå –£–¥–∞–ª–∏—Ç—å" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def delete_start(m: types.Message):
    kb=InlineKeyboardMarkup(); cur.execute("SELECT id,name FROM products")
    for pid,name in cur.fetchall(): kb.add(InlineKeyboardButton(name,callback_data=f"del:{pid}"))
    await m.answer("–£–¥–∞–ª–∏—Ç—å:",reply_markup=kb)
@dp.callback_query_handler(lambda c:c.data.startswith("del:") and str(c.from_user.id) in ADMINS, state=Mode.admin)
async def delete_exec(cb: types.CallbackQuery):
    pid=int(cb.data.split(":")[1])
    cur.execute("DELETE FROM products WHERE id=?", (pid,)); db.commit()
    await cb.message.answer("–£–¥–∞–ª—ë–Ω."); await cb.answer()

# üìë –ó–∞–∫–∞–∑—ã
@dp.message_handler(lambda m:m.text=="üìë –ó–∞–∫–∞–∑—ã" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def orders_list(m: types.Message):
    cur.execute("SELECT id,user_id,ts,items,status FROM orders ORDER BY id DESC LIMIT 15")
    rows=cur.fetchall()
    if not rows: await m.answer("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç."); return
    kb=InlineKeyboardMarkup()
    txt=[]
    for oid,uid,ts,it,st in rows:
        txt.append(f"#{oid} ‚Ä¢ {ts[:16]} ‚Ä¢ {st}")
        if st!="done":
            kb.add(InlineKeyboardButton(f"‚úÖ {oid}",callback_data=f"done:{oid}"))
    await m.answer("\n".join(txt),reply_markup=kb)

@dp.callback_query_handler(lambda c:c.data.startswith("done:") and str(c.from_user.id) in ADMINS, state=Mode.admin)
async def order_done(cb: types.CallbackQuery):
    oid=int(cb.data.split(":")[1])
    cur.execute("UPDATE orders SET status='done' WHERE id=?", (oid,)); db.commit()
    await cb.answer("–ó–∞–∫—Ä—ã—Ç–æ."); await orders_list(cb.message)

# –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ admin
@dp.message_handler(lambda m:m.text=="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def back_admin(m: types.Message):
    await m.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é",reply_markup=admin_kb)

# –Ω–∞–∑–∞–¥ –∏–∑ user-—Ä–µ–∂–∏–º–∞
@dp.message_handler(lambda m:m.text=="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and str(m.from_user.id) in ADMINS, state=Mode.user)
async def back_to_admin(m: types.Message):
    await m.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",reply_markup=admin_kb); await Mode.admin.set()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫
if __name__=="__main__":
    executor.start_polling(dp, skip_updates=True)
