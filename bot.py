
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from config import BOT_TOKEN
import logging

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
user_cart = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞"))
main_menu.add(KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

# –ö–∞—Ç–∞–ª–æ–≥
catalog_items = {
    "üí® Elf Bar 600": "–í–∫—É—Å: –∞—Ä–±—É–∑, –Ω–∏–∫–æ—Ç–∏–Ω: 2%, —Ü–µ–Ω–∞: 350‚ÇΩ",
    "üîã HQD Cuvie Air": "–í–∫—É—Å: –º–∞–Ω–≥–æ, –Ω–∏–∫–æ—Ç–∏–Ω: 5%, —Ü–µ–Ω–∞: 750‚ÇΩ"
}

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Plumbus Shop! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–º: @PlumbusSupport")

@dp.message_handler(lambda m: m.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: types.Message):
    markup = InlineKeyboardMarkup()
    for name in catalog_items:
        markup.add(InlineKeyboardButton(name, callback_data=f"buy:{name}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("buy:"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item = callback.data.split("buy:")[1]
    user_cart.setdefault(user_id, []).append(item)
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ")
    await callback.message.answer(f"{item} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")

@dp.message_handler(lambda m: m.text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞")
async def cart(message: types.Message):
    cart = user_cart.get(message.from_user.id, [])
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        text = "\n".join(f"‚Ä¢ {item}" for item in cart)
        await message.answer(f"üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{text}\n\n–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏: –û—Ñ–æ—Ä–º–∏—Ç—å")

@dp.message_handler(lambda m: m.text.lower() == "–æ—Ñ–æ—Ä–º–∏—Ç—å")
async def checkout(message: types.Message):
    cart = user_cart.get(message.from_user.id, [])
    if not cart:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    else:
        order = "\n".join(cart)
        await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç:\n{order}\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ üôå")
        user_cart[message.from_user.id] = []

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
