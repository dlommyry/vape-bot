import logging, sqlite3, datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (KeyboardButton, ReplyKeyboardMarkup,
                           InlineKeyboardButton, InlineKeyboardMarkup)
from aiogram.utils import executor
from config import BOT_TOKEN, ADMINS   # BOT_TOKEN –∏ ADMINS –±–µ—Ä—ë–º –∏–∑ Railway Variables

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN)
dp  = Dispatcher(bot, storage=MemoryStorage())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ SQLite
db  = sqlite3.connect("vape_shop.db")
cur = db.cursor()
cur.executescript("""
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY,
    name TEXT,
    description TEXT,
    quantity INTEGER,
    flavors TEXT                 -- NULL –∏–ª–∏ "–ú–∞–Ω–≥–æ, –í–∏–Ω–æ–≥—Ä–∞–¥, –ö–æ–ª–∞"
);
CREATE TABLE IF NOT EXISTS cart (
    rowid INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    product_id INTEGER,
    flavor TEXT,
    qty INTEGER
);
CREATE TABLE IF NOT EXISTS waitlist (
    user_id INTEGER,
    product_id INTEGER
);
CREATE TABLE IF NOT EXISTS orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    items TEXT,                  -- "Waka√ó2 (–ú–∞–Ω–≥–æ), Elf√ó1"
    ts TEXT,                     -- ISO 8601
    status TEXT
);
""")
db.commit()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
user_kb = ReplyKeyboardMarkup(resize_keyboard=True)
user_kb.row("üõç –ö–∞—Ç–∞–ª–æ–≥", "üß∫ –ö–æ—Ä–∑–∏–Ω–∞")
user_kb.row("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üìú –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
user_kb.row("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º")

admin_kb = ReplyKeyboardMarkup(resize_keyboard=True)
admin_kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å")
admin_kb.row("‚úèÔ∏è –û—Å—Ç–∞—Ç–æ–∫", "üì¶ –°–∫–ª–∞–¥")
admin_kb.row("üìë –ó–∞–∫–∞–∑—ã")
admin_kb.row("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
class Mode(StatesGroup):
    user  = State()
    admin = State()

class AddFSM(StatesGroup):
    name = State(); desc = State(); qty = State(); flavors = State()

class EditFSM(StatesGroup):
    pid = State(); qty = State()

class QtyFSM(StatesGroup):
    waiting = State()   # –∂–¥—ë–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start
@dp.message_handler(commands="start", state="*")
async def cmd_start(m: types.Message, state:FSMContext):
    if str(m.from_user.id) in ADMINS:
        await m.answer("–í—ã –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.", reply_markup=user_kb)
        await Mode.user.set()
    else:
        await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=user_kb)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üîÑ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞
@dp.message_handler(lambda m: m.text == "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º" and str(m.from_user.id) in ADMINS, state="*")
async def switch_mode(m: types.Message, state:FSMContext):
    if await state.get_state() == Mode.user.state:
        await m.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_kb); await Mode.admin.set()
    else:
        await m.answer("üõí –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º.", reply_markup=user_kb); await Mode.user.set()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª (–ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é)
@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def back_admin(m: types.Message): await m.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=admin_kb)
@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and str(m.from_user.id) in ADMINS, state=Mode.user)
async def back_user(m: types.Message):  await m.answer("–ö–ª–∏–µ–Ω—Ç-–º–µ–Ω—é", reply_markup=user_kb)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
@dp.message_handler(lambda m: m.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", state=Mode.user)
async def support(m: types.Message): await m.answer("–î–ª—è —Å–≤—è–∑–∏: @PlumbusSupport")

@dp.message_handler(lambda m: m.text == "üõç –ö–∞—Ç–∞–ª–æ–≥", state=Mode.user)
async def catalog(m: types.Message):
    kb = InlineKeyboardMarkup()
    cur.execute("SELECT id,name,quantity FROM products")
    for pid,name,qty in cur.fetchall():
        kb.add(InlineKeyboardButton(f"{name} ({qty})", callback_data=f"v:{pid}"))
    await m.answer("–ö–∞—Ç–∞–ª–æ–≥:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("v:"), state=Mode.user)
async def view(cb: types.CallbackQuery):
    pid = int(cb.data[2:])
    cur.execute("SELECT name,description,quantity,flavors FROM products WHERE id=?", (pid,))
    name,desc,qty,flavors = cur.fetchone()
    kb = InlineKeyboardMarkup()
    if qty > 0:
        if flavors:                               # –µ—Å—Ç—å –≤–∫—É—Å—ã
            for idx,flv in enumerate(flavors.split(","), 1):
                flv = flv.strip()
                kb.add(InlineKeyboardButton(f"{flv}", callback_data=f"a:{pid}:{idx}"))
        else:                                    # –Ω–µ—Ç –≤–∫—É—Å–æ–≤
            kb.add(InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"a:{pid}:0"))
    else:
        kb.add(InlineKeyboardButton("üîî –ñ–¥–∞—Ç—å", callback_data=f"w:{pid}"))
    txt = f"*{name}*\n{desc}\n–û—Å—Ç–∞—Ç–æ–∫: {qty}"
    await cb.message.answer(txt, parse_mode="Markdown", reply_markup=kb)
    await cb.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É (—à–∞–≥ 1 ‚Äî –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
@dp.callback_query_handler(lambda c: c.data.startswith("a:"), state=Mode.user)
async def choose_qty(cb: types.CallbackQuery, state:FSMContext):
    _, pid, flav_idx = cb.data.split(":")
    await state.update_data(pid=int(pid), flav_idx=int(flav_idx))
    kb = InlineKeyboardMarkup()
    for i in range(1,11):
        kb.add(InlineKeyboardButton(str(i), callback_data=f"q:{i}"))
    await cb.message.answer("–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫?", reply_markup=kb)
    await QtyFSM.waiting.set()
    await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("q:"), state=QtyFSM.waiting)
async def save_qty(cb: types.CallbackQuery, state:FSMContext):
    qty = int(cb.data[2:])
    data = await state.get_data()
    pid, flav_idx = data['pid'], data['flav_idx']
    # flavour text
    cur.execute("SELECT flavors FROM products WHERE id=?", (pid,))
    flist = cur.fetchone()[0]
    flavor = None
    if flist and flav_idx:
        flavor = flist.split(",")[flav_idx-1].strip()
    cur.execute("INSERT INTO cart(user_id, product_id, flavor, qty) VALUES (?,?,?,?)",
                (cb.from_user.id, pid, flavor, qty))
    db.commit()
    await cb.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")
    await state.finish(); await cb.answer()

# –ñ–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
@dp.callback_query_handler(lambda c: c.data.startswith("w:"), state=Mode.user)
async def wait_item(cb: types.CallbackQuery):
    pid = int(cb.data[2:])
    cur.execute("INSERT INTO waitlist VALUES (?,?)", (cb.from_user.id, pid)); db.commit()
    await cb.answer("–°–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è!")

# –ü–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ—Ä–∑–∏–Ω–∞
@dp.message_handler(lambda m: m.text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞", state=Mode.user)
async def show_cart(m: types.Message):
    cur.execute("""SELECT cart.rowid,products.name,cart.flavor,cart.qty
                   FROM cart JOIN products ON products.id=cart.product_id
                   WHERE cart.user_id=?""",(m.from_user.id,))
    items = cur.fetchall()
    if not items:
        await m.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."); return
    kb = InlineKeyboardMarkup()
    lines=[]
    for rid,name,flav,qty in items:
        label = f"{name}"
        if flav: label += f" ({flav})"
        lines.append(f"{rid}. {label} √ó{qty}")
        kb.add(InlineKeyboardButton(f"üóë {rid}", callback_data=f"del:{rid}"))
    kb.add(
        InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clr"),
        InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data="ok")
    )
    await m.answer("–ö–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join(lines), reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data=="clr", state=Mode.user)
async def cart_clear(cb: types.CallbackQuery):
    cur.execute("DELETE FROM cart WHERE user_id=?", (cb.from_user.id,)); db.commit()
    await cb.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞."); await cb.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("del:"), state=Mode.user)
async def cart_del(cb: types.CallbackQuery):
    cur.execute("DELETE FROM cart WHERE rowid=?", (int(cb.data.split(':')[1]),)); db.commit()
    await cb.answer("–£–¥–∞–ª–µ–Ω–æ"); await show_cart(cb.message)

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def notify_waitlist(pid:int, new_qty:int):
    if new_qty<=0: return
    cur.execute("SELECT user_id FROM waitlist WHERE product_id=?", (pid,))
    users = [u for (u,) in cur.fetchall()]
    if not users: return
    cur.execute("SELECT name FROM products WHERE id=?", (pid,)); name=cur.fetchone()[0]
    for uid in users:
        try: await bot.send_message(uid, f"üîî *{name}* —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏!", parse_mode="Markdown")
        except: pass
    cur.execute("DELETE FROM waitlist WHERE product_id=?", (pid,)); db.commit()

@dp.callback_query_handler(lambda c: c.data=="ok", state=Mode.user)
async def checkout(cb: types.CallbackQuery):
    cur.execute("""SELECT products.name,cart.flavor,cart.qty,cart.product_id
                   FROM cart JOIN products ON products.id=cart.product_id
                   WHERE cart.user_id=?""",(cb.from_user.id,))
    rows=cur.fetchall()
    if not rows: await cb.answer("–ü—É—Å—Ç–æ"); return
    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
    parts=[]
    for name,flav,qty,pid in rows:
        lbl = f"{name}" + (f" ({flav})" if flav else "")
        parts.append(f"{lbl}√ó{qty}")
        cur.execute("UPDATE products SET quantity = quantity - ? WHERE id=?", (qty,pid))
        # —É–≤–µ–¥–æ–º–∏—Ç—å waitlist, –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ç–∞–ª >0 ‚Äî –≤–æ –≤—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –¥–µ–ª–∞–µ–º
    items_text = ", ".join(parts)
    ts = datetime.datetime.now().isoformat(timespec='minutes')
    cur.execute("INSERT INTO orders(user_id,items,ts,status) VALUES(?,?,?,?)",
                (cb.from_user.id, items_text, ts, "new"))
    oid = cur.lastrowid; db.commit()
    cur.execute("DELETE FROM cart WHERE user_id=?", (cb.from_user.id,)); db.commit()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for adm in ADMINS:
        await bot.send_message(adm, f"üÜï –ó–∞–∫–∞–∑ #{oid}\n{items_text}\n–û—Ç: {cb.from_user.get_mention(cb.from_user.id)}")

    await cb.message.edit_text(f"–ó–∞–∫–∞–∑ #{oid} –ø—Ä–∏–Ω—è—Ç! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è.")
    await cb.answer()

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(lambda m: m.text=="üìú –ú–æ–∏ –∑–∞–∫–∞–∑—ã", state=Mode.user)
async def my_orders(m: types.Message):
    cur.execute("SELECT id,ts,items,status FROM orders WHERE user_id=? ORDER BY id DESC LIMIT 10",
                (m.from_user.id,))
    rows = cur.fetchall()
    if not rows:
        await m.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."); return
    text = "\n\n".join(f"‚Ññ{oid} ‚Ä¢ {ts[:16]}\n{it}\n–°—Ç–∞—Ç—É—Å: {st}" for oid,ts,it,st in rows)
    await m.answer(text)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò
# ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä (—Å –≤–∫—Éc–∞–º–∏)
@dp.message_handler(lambda m: m.text=="‚ûï –î–æ–±–∞–≤–∏—Ç—å" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def add_1(m: types.Message): await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ:"); await AddFSM.name.set()
@dp.message_handler(state=AddFSM.name)
async def add_2(m: types.Message, state:FSMContext):
    await state.update_data(name=m.text); await m.answer("–û–ø–∏—Å–∞–Ω–∏–µ:"); await AddFSM.desc.set()
@dp.message_handler(state=AddFSM.desc)
async def add_3(m: types.Message, state:FSMContext):
    await state.update_data(desc=m.text); await m.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ):"); await AddFSM.qty.set()
@dp.message_handler(state=AddFSM.qty)
async def add_4(m: types.Message, state:FSMContext):
    try: q=int(m.text)
    except: await m.answer("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ."); return
    await state.update_data(qty=q)
    await m.answer("–í–∫—É—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ ¬´-¬ª, –µ—Å–ª–∏ –±–µ–∑ –≤–∫—É—Å–æ–≤):"); await AddFSM.flavors.set()
@dp.message_handler(state=AddFSM.flavors)
async def add_save(m: types.Message, state:FSMContext):
    data=await state.get_data()
    flavors = None if m.text.strip()=="-" else m.text
    cur.execute("INSERT INTO products(name,description,quantity,flavors) VALUES(?,?,?,?)",
                (data['name'], data['desc'], data['qty'], flavors))
    db.commit()
    await m.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=admin_kb)
    await state.finish()

# ‚úèÔ∏è –û—Å—Ç–∞—Ç–æ–∫
@dp.message_handler(lambda m: m.text=="‚úèÔ∏è –û—Å—Ç–∞—Ç–æ–∫" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def edit_choose(m: types.Message):
    kb=InlineKeyboardMarkup(); cur.execute("SELECT id,name FROM products")
    for pid,name in cur.fetchall(): kb.add(InlineKeyboardButton(name,callback_data=f"chg:{pid}"))
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä:", reply_markup=kb)
@dp.callback_query_handler(lambda c:c.data.startswith("chg:") and str(c.from_user.id) in ADMINS, state=Mode.admin)
async def edit_qty(cb: types.CallbackQuery, state:FSMContext):
    pid=int(cb.data[4:]); await state.update_data(pid=pid)
    await cb.message.answer("–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"); await EditFSM.qty.set(); await cb.answer()
@dp.message_handler(state=EditFSM.qty)
async def edit_save(m: types.Message, state:FSMContext):
    try: q=int(m.text)
    except: await m.answer("–ß–∏—Å–ª–æ!"); return
    pid=(await state.get_data())['pid']
    cur.execute("UPDATE products SET quantity=? WHERE id=?", (q,pid)); db.commit()
    await m.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=admin_kb)
    await notify_waitlist(pid, q)  # —É–≤–µ–¥–æ–º–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏—Ö
    await state.finish()

# ‚ùå –£–¥–∞–ª–∏—Ç—å
@dp.message_handler(lambda m: m.text=="‚ùå –£–¥–∞–ª–∏—Ç—å" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def del_choose(m: types.Message):
    kb=InlineKeyboardMarkup(); cur.execute("SELECT id,name FROM products")
    for pid,name in cur.fetchall(): kb.add(InlineKeyboardButton(name,callback_data=f"del:{pid}"))
    await m.answer("–£–¥–∞–ª–∏—Ç—å:", reply_markup=kb)
@dp.callback_query_handler(lambda c:c.data.startswith("del:") and str(c.from_user.id) in ADMINS, state=Mode.admin)
async def del_exec(cb: types.CallbackQuery):
    pid=int(cb.data[4:]); cur.execute("DELETE FROM products WHERE id=?", (pid,)); db.commit()
    await cb.message.answer("–£–¥–∞–ª–µ–Ω–æ."); await cb.answer()

# üì¶ –°–∫–ª–∞–¥
@dp.message_handler(lambda m: m.text=="üì¶ –°–∫–ª–∞–¥" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def show_stock(m: types.Message):
    cur.execute("SELECT id,name,quantity FROM products")
    txt="\n".join(f"{pid}. {n} ‚Äî {q}" for pid,n,q in cur.fetchall()) or "–ü—É—Å—Ç–æ."
    await m.answer(txt)

# üìë –ó–∞–∫–∞–∑—ã CRM
@dp.message_handler(lambda m: m.text=="üìë –ó–∞–∫–∞–∑—ã" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def crm(m: types.Message):
    cur.execute("SELECT id,user_id,ts,status FROM orders ORDER BY id DESC LIMIT 20")
    rows=cur.fetchall()
    if not rows: await m.answer("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç."); return
    kb=InlineKeyboardMarkup()
    out=[]
    for oid,uid,ts,st in rows:
        out.append(f"#{oid} ‚Ä¢ {ts[:16]} ‚Ä¢ {st} ‚Ä¢ UID {uid}")
        if st!="done": kb.add(InlineKeyboardButton(f"‚úÖ #{oid}", callback_data=f"done:{oid}"))
    await m.answer("\n".join(out), reply_markup=kb)
@dp.callback_query_handler(lambda c:c.data.startswith("done:") and str(c.from_user.id) in ADMINS, state=Mode.admin)
async def mark_done(cb: types.CallbackQuery):
    oid=int(cb.data[5:]); cur.execute("UPDATE orders SET status='done' WHERE id=?", (oid,)); db.commit()
    await cb.answer("–ó–∞–∫—Ä—ã—Ç."); await crm(cb.message)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫
if __name__=="__main__":
    logging.info("Bot started")
    executor.start_polling(dp, skip_updates=True)
