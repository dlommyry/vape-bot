"""
Plumbus Shop v2 ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–∫–ª–∞–¥, –∫–æ—Ä–∑–∏–Ω–∞, –∑–∞–∫–∞–∑—ã
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
    one_time  ‚Äì ¬´–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã¬ª
    pod       ‚Äì ¬´–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã¬ª
    juice     ‚Äì ¬´–ñ–∏–¥–∫–æ—Å—Ç–∏¬ª
    other     ‚Äì ¬´–†–∞–∑–Ω–æ–µ¬ª
"""

import logging, sqlite3, pathlib, datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardButton, InlineKeyboardMarkup)
from aiogram.utils import executor
from config import BOT_TOKEN, ADMINS

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–∞–∑–∞
DB = "/data/vape_shop.db"                          # –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–º Railway
def ensure_db():
    first = not pathlib.Path(DB).exists()
    con = sqlite3.connect(DB); cur = con.cursor()
    cur.executescript("""
    CREATE TABLE IF NOT EXISTS products (id INTEGER PRIMARY KEY,
        name TEXT, description TEXT, category TEXT DEFAULT 'other');
    CREATE TABLE IF NOT EXISTS flavors  (id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER, flavor TEXT, qty INTEGER);
    CREATE TABLE IF NOT EXISTS cart     (rowid INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER, flavor_id INTEGER, qty INTEGER);
    CREATE TABLE IF NOT EXISTS waitlist (user_id INTEGER, flavor_id INTEGER);
    CREATE TABLE IF NOT EXISTS orders   (id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER, items TEXT, ts TEXT, status TEXT);
    """); con.commit(); con.close()
    if first: logging.info("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ %s", DB)
ensure_db()
db  = sqlite3.connect(DB)
cur = db.cursor()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–æ—Ç
logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN)
dp  = Dispatcher(bot, storage=MemoryStorage())

# ---------- –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATS = {
    "one_time": "–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã",
    "pod":      "–ú–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã",
    "juice":    "–ñ–∏–¥–∫–æ—Å—Ç–∏",
    "other":    "–†–∞–∑–Ω–æ–µ"
}

# ---------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def user_kb(is_admin=False):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üõç –ö–∞—Ç–∞–ª–æ–≥", "üß∫ –ö–æ—Ä–∑–∏–Ω–∞")
    kb.row("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üìú –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    if is_admin: kb.add("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º")
    return kb

admin_kb = ReplyKeyboardMarkup(resize_keyboard=True)
admin_kb.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å")
admin_kb.row("‚úèÔ∏è –û—Å—Ç–∞—Ç–æ–∫", "üì¶ –°–∫–ª–∞–¥", "üìë –ó–∞–∫–∞–∑—ã")
admin_kb.add("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º")

# ---------- FSM
class Mode(StatesGroup):  user = State(); admin = State()
class Add (StatesGroup):
    name=State(); desc=State(); cat=State(); cnt=State(); flavor=State(); qty=State()
class Edit(StatesGroup):  fid=State(); qty=State()
class Buy (StatesGroup):  fid=State(); maxq=State(); qty=State()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /start
@dp.message_handler(commands="start", state="*")
async def start(m: types.Message, state:FSMContext):
    await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=user_kb(str(m.from_user.id) in ADMINS))
    await Mode.user.set()

# ---------- —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞
@dp.message_handler(lambda m:m.text=="üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º" and str(m.from_user.id) in ADMINS, state="*")
async def switch(m: types.Message, state:FSMContext):
    if await state.get_state()==Mode.user.state:
        await m.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_kb); await Mode.admin.set()
    else:
        await m.answer("üõí –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ä–µ–∂–∏–º.", reply_markup=user_kb(True)); await Mode.user.set()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–õ–ò–ï–ù–¢
@dp.message_handler(lambda m:m.text=="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", state=Mode.user)
async def support(m): await m.answer("–°–≤—è–∑—å: @PlumbusSupport")

# --- –∫–∞—Ç–∞–ª–æ–≥: —à–∞–≥ 1 ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(lambda m:m.text=="üõç –ö–∞—Ç–∞–ª–æ–≥", state=Mode.user)
async def cat_root(m):
    kb = InlineKeyboardMarkup()
    for code, title in CATS.items():
        kb.add(InlineKeyboardButton(title, callback_data=f"C{code}"))
    await m.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=kb)

# --- –∫–∞—Ç–∞–ª–æ–≥: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query_handler(lambda c:c.data.startswith("C"), state=Mode.user)
async def cat_list(cb: types.CallbackQuery):
    code = cb.data[1:]
    kb   = InlineKeyboardMarkup()
    cur.execute("""SELECT p.id,p.name,COALESCE(SUM(f.qty),0)
                   FROM products p JOIN flavors f ON f.product_id=p.id
                   WHERE p.category=? GROUP BY p.id""",(code,))
    rows = cur.fetchall()
    if not rows:
        await cb.message.edit_text("–ü—É—Å—Ç–æ."); await cb.answer(); return
    for pid,n,q in rows:
        kb.add(InlineKeyboardButton(f"{n} ({q})", callback_data=f"P{pid}"))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="BACK"))
    await cb.message.edit_text(CATS[code]+":", reply_markup=kb); await cb.answer()

@dp.callback_query_handler(lambda c:c.data=="BACK", state=Mode.user)
async def back_to_root(cb):
    await cat_root(cb.message); await cb.answer()

# --- –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(lambda c:c.data.startswith("P"), state=Mode.user)
async def show_prod(cb,state:FSMContext):
    pid=int(cb.data[1:])
    cur.execute("SELECT name,description FROM products WHERE id=?", (pid,))
    name,desc=cur.fetchone()
    kb=InlineKeyboardMarkup()
    cur.execute("SELECT id,flavor,qty FROM flavors WHERE product_id=?", (pid,))
    for fid,fl,q in cur.fetchall():
        label=f"{fl} ({q})" if fl!="default" else f"–û—Å—Ç–∞—Ç–æ–∫ ({q})"
        kb.add(InlineKeyboardButton(label, callback_data=("F" if q>0 else "W")+str(fid)))
    kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="BACK_TO_CAT"))
    await state.update_data(pid=pid)     # —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ Back
    await cb.message.answer(f"*{name}*\n{desc}", parse_mode="Markdown", reply_markup=kb)
    await cb.answer()

@dp.callback_query_handler(lambda c:c.data=="BACK_TO_CAT", state=Mode.user)
async def back_to_cat(cb,state:FSMContext):
    pid=(await state.get_data())['pid']
    cur.execute("SELECT category FROM products WHERE id=?", (pid,)); code=cur.fetchone()[0]
    await cat_list(types.CallbackQuery(id=cb.id, from_user=cb.from_user,
                                       message=cb.message, data="C"+code));  # –∫–æ—Å—Ç—ã–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º
    await cb.answer()

# --- –≤—ã–±–æ—Ä –≤–∫—É—Å–∞
@dp.callback_query_handler(lambda c:c.data.startswith("F"), state=Mode.user)
async def ask_qty(cb,state:FSMContext):
    fid=int(cb.data[1:])
    cur.execute("SELECT qty FROM flavors WHERE id=?", (fid,)); maxq=cur.fetchone()[0]
    await state.update_data(fid=fid,maxq=maxq)
    kb=InlineKeyboardMarkup()
    for i in range(1, min(maxq,10)+1):
        kb.add(InlineKeyboardButton(str(i),callback_data=f"Q{i}"))
    await cb.message.answer("–°–∫–æ–ª—å–∫–æ —à—Ç—É–∫?", reply_markup=kb)
    await Buy.qty.set(); await cb.answer()

@dp.callback_query_handler(lambda c:c.data.startswith("Q"), state=Buy.qty)
async def add_cart(cb,state:FSMContext):
    qty=int(cb.data[1:]); d=await state.get_data()
    if qty>d['maxq']:
        await cb.answer("–°—Ç–æ–ª—å–∫–æ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ!", show_alert=True); return
    cur.execute("INSERT INTO cart(user_id,flavor_id,qty) VALUES(?,?,?)",
                (cb.from_user.id,d['fid'],qty)); db.commit()
    await cb.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ"); await state.finish(); await cb.answer()

# --- wait-–ª–∏—Å—Ç
@dp.callback_query_handler(lambda c:c.data.startswith("W"), state=Mode.user)
async def wait(cb): cur.execute("INSERT INTO waitlist VALUES(?,?)",(cb.from_user.id,int(cb.data[1:]))); db.commit(); await cb.answer("–°–æ–æ–±—â—É, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è")

# ---------- –∫–æ—Ä–∑–∏–Ω–∞ / —á–µ–∫-–∞—É—Ç (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... –∫–æ–¥ –∫–æ—Ä–∑–∏–Ω—ã –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –ø—Ä–æ—à–ª–æ–π –≤–µ—Ä—Å–∏–∏ ...

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–î–ú–ò–ù
@dp.message_handler(lambda m:m.text=="‚ûï –î–æ–±–∞–≤–∏—Ç—å" and str(m.from_user.id) in ADMINS, state=Mode.admin)
async def add_start(m): await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ:"); await Add.name.set()

@dp.message_handler(state=Add.name)
async def add_desc(m,state:FSMContext):
    await state.update_data(name=m.text); await m.answer("–û–ø–∏—Å–∞–Ω–∏–µ:"); await Add.desc.set()

@dp.message_handler(state=Add.desc)
async def ask_cat(m,state:FSMContext):
    kb=InlineKeyboardMarkup()
    for code,title in CATS.items():
        kb.add(InlineKeyboardButton(title,callback_data=f"K{code}"))
    await state.update_data(desc=m.text)
    await m.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb); await Add.cat.set()

@dp.callback_query_handler(lambda c:c.data.startswith("K"), state=Add.cat)
async def add_cnt(cb,state:FSMContext):
    await state.update_data(cat=cb.data[1:])
    await cb.message.answer("–°–∫–æ–ª—å–∫–æ –≤–∫—É—Å–æ–≤? (0 ‚Äî –±–µ–∑ –≤–∫—É—Å–∞)"); await Add.cnt.set(); await cb.answer()

# ... –¥–∞–ª–µ–µ –±–ª–æ–∫ Add.cnt / Add.flavor / Add.qty / finish_add –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º,
# –Ω–æ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ products –¥–æ–±–∞–≤–ª—è–µ–º category=state['cat'] ...

# ‚óÑ==== –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–æ—Å—Ç–∞—Ç–æ–∫, —Å–∫–ª–∞–¥, delete, –∑–∞–∫–∞–∑—ã) –ù–ï –º–µ–Ω—è–µ—Ç—Å—è.
#      –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –µ–≥–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏.

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫
if __name__=="__main__":
    executor.start_polling(dp, skip_updates=True)
