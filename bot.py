
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils import executor
from config import BOT_TOKEN, ADMINS
import sqlite3
import logging

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
conn = sqlite3.connect("vape_shop.db")
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    description TEXT,
    quantity INTEGER,
    category TEXT
)""")
cursor.execute("""CREATE TABLE IF NOT EXISTS waitlist (
    user_id INTEGER,
    product_name TEXT
)""")
conn.commit()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã ---
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("üß∫ –ö–æ—Ä–∑–∏–Ω–∞"))
main_menu.add(KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

admin_menu = ReplyKeyboardMarkup(resize_keyboard=True)
admin_menu.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"))
admin_menu.add(KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫"), KeyboardButton("üì¶ –û—Å—Ç–∞—Ç–∫–∏"))
admin_menu.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))

user_cart = {}

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if str(message.from_user.id) in ADMINS:
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞:", reply_markup=admin_menu)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Plumbus Shop! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.message_handler(lambda m: m.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @PlumbusSupport")

@dp.message_handler(lambda m: m.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: types.Message):
    markup = InlineKeyboardMarkup()
    cursor.execute("SELECT name, quantity FROM products")
    for name, qty in cursor.fetchall():
        label = f"{name} ({'–≤ –Ω–∞–ª–∏—á–∏–∏' if qty > 0 else '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'})"
        markup.add(InlineKeyboardButton(label, callback_data=f"view:{name}"))
    await message.answer("üì¶ –¢–æ–≤–∞—Ä—ã:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("view:"))
async def view_product(callback: types.CallbackQuery):
    name = callback.data.split("view:")[1]
    cursor.execute("SELECT description, quantity FROM products WHERE name = ?", (name,))
    row = cursor.fetchone()
    if row:
        description, qty = row
        markup = InlineKeyboardMarkup()
        if qty > 0:
            markup.add(InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"buy:{name}"))
        else:
            markup.add(InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏", callback_data=f"wait:{name}"))
        await callback.message.answer(f"""üìù {name}
{description}
–û—Å—Ç–∞—Ç–æ–∫: {qty}""", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("buy:"))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item = callback.data.split("buy:")[1]
    user_cart.setdefault(user_id, []).append(item)
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ")

@dp.callback_query_handler(lambda c: c.data.startswith("wait:"))
async def add_to_waitlist(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    item = callback.data.split("wait:")[1]
    cursor.execute("INSERT INTO waitlist (user_id, product_name) VALUES (?, ?)", (user_id, item))
    conn.commit()
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è üîî")

@dp.message_handler(lambda m: m.text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    cart = user_cart.get(message.from_user.id, [])
    if not cart:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return
    order_text = "\n".join(cart)
    await message.answer(f"üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{order_text}\n(–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é.)")

# --- –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ ---
@dp.message_handler(lambda m: m.text == "üì¶ –û—Å—Ç–∞—Ç–∫–∏" and str(m.from_user.id) in ADMINS)
async def show_stock(message: types.Message):
    cursor.execute("SELECT name, quantity FROM products")
    text = "\n".join(f"{name}: {qty}" for name, qty in cursor.fetchall())
    await message.answer("üì¶ –°–∫–ª–∞–¥:\n" + text)
